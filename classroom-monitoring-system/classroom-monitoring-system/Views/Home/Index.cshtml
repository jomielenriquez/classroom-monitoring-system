@model List<classroom_monitoring_system.Models.User>
@using System.Security.Claims
@{
    ViewData["Title"] = "Home Page";

    var roles = User.FindFirstValue(ClaimTypes.Role);
    var userId = User.FindFirstValue("Id");
}

@if(roles == "Admin")
{
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-header">Professor Attendance (This Week)</div>
                <div class="card-body">
                    <canvas id="attendanceChart" height="120"></canvas>
                </div>
            </div>
        </div>
        @* <div class="col">
            <div class="card">
                <div class="card-header">Users with no fingerprint enrolled</div>
                <div class="card-body">

                </div>
            </div>
        </div> *@
    </div>
    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Fetch data from your API endpoint
                fetch('/Home/GetWeeklySummary')
                    .then(response => response.json())
                    .then(data => {
                        const ctx = document.getElementById('attendanceChart').getContext('2d');

                        new Chart(ctx, {
                            type: 'bar', // or 'line', 'pie', etc.
                            data: {
                                labels: data.labels, // e.g., ["Mon", "Tue", "Wed", "Thu", "Fri"]
                                datasets: [{
                                    label: 'Attendance Count',
                                    data: data.values, // e.g., [8, 10, 7, 12, 9]
                                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                                    borderColor: 'rgba(54, 162, 235, 1)',
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                scales: {
                                    y: {
                                        beginAtZero: true,
                                        title: {
                                            display: true,
                                            text: 'No. of Attendances'
                                        }
                                    },
                                    x: {
                                        title: {
                                            display: true,
                                            text: 'Day of the Week'
                                        }
                                    }
                                }
                            }
                        });
                    })
                    .catch(err => console.error('Error loading chart:', err));
            });
        </script>

    }
}
@if(roles == "Checker"){}
@if(roles == "Professor")
{
    <div class="card mb-3">
        <div class="card-body">
            <div id="calendar"></div>
        </div>
    </div>

    @section Scripts {
        <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.9/index.global.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const calendarEl = document.getElementById('calendar');

                const calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'timeGridDay',
                    selectable: true,
                    nowIndicator: true,
                    allDaySlot: false,
                    slotMinTime: "06:00:00",
                    slotMaxTime: "21:00:00",
                    height: "auto",

                    events: function (fetchInfo, successCallback, failureCallback) {
                        const roomId = "@userId"; // if you have it in your model
                        fetch(`/RoomSchedule/GetSchedulesByProfId?profId=${roomId}`)
                            .then(response => response.json())
                            .then(data => successCallback(data))
                            .catch(err => failureCallback(err));
                    },
                    eventContent: function(arg) {
                        const e = arg.event;
                        const note = e.extendedProps.note ? `<small>${e.extendedProps.note}</small>` : '';
                        const room = e.extendedProps.room ? `<div><i>${e.extendedProps.room}</i></div>` : '';
                        const time = e.extendedProps.time ? `<div><i>${e.extendedProps.time}</i></div>` : '';
                        const subject = e.extendedProps.subject ? `<div><i>${e.extendedProps.subject}</i></div>` : '';
                        return { html: `<b>${e.title}</b>${room}${note}${time}<b>${subject}<b/>` };
                    },
                    select: function (info) {
                    }
                });

                calendar.render();
            });
        </script>
    }

}
